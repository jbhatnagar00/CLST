// src/features/closet/api/closet.api.ts
import { apiClient } from '@/shared/services/api/ApiClient';
import type { ClothingItem } from '../types';
import type { PaginatedResponse, PaginationParams } from '@/shared/types';

export const closetApi = {
  getItems: async (params?: PaginationParams & {
    category?: string;
    search?: string;
    tags?: string[];
  }): Promise<PaginatedResponse<ClothingItem>> => {
    return apiClient.get('/closet/items', { params });
  },

  getItem: async (id: string): Promise<ClothingItem> => {
    return apiClient.get(`/closet/items/${id}`);
  },

  createItem: async (data: FormData): Promise<ClothingItem> => {
    return apiClient.post('/closet/items', data, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
  },

  updateItem: async (id: string, data: FormData): Promise<ClothingItem> => {
    return apiClient.patch(`/closet/items/${id}`, data, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
  },

  deleteItem: async (id: string): Promise<void> => {
    return apiClient.delete(`/closet/items/${id}`);
  },

  deleteMultipleItems: async (ids: string[]): Promise<void> => {
    return apiClient.post('/closet/items/batch-delete', { ids });
  },

  uploadImage: async (file: File): Promise<{ url: string; thumbnailUrl: string }> => {
    const formData = new FormData();
    formData.append('image', file);
    return apiClient.post('/closet/upload-image', formData, {
      headers: { 'Content-Type': 'multipart/form-data' },
    });
  },

  getTags: async (): Promise<string[]> => {
    return apiClient.get('/closet/tags');
  },

  incrementWearCount: async (id: string): Promise<void> => {
    return apiClient.post(`/closet/items/${id}/wear`);
  },
};

// src/features/closet/components/ItemCard/ItemCard.tsx
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { Card } from '@/shared/components/ui/Card';
import { Button } from '@/shared/components/ui/Button';
import { formatCurrency, formatRelativeTime } from '@/shared/utils/helpers';
import type { ClothingItem } from '../../types';

interface ItemCardProps {
  item: ClothingItem;
  onEdit?: () => void;
  onDelete?: () => void;
  onSelect?: (selected: boolean) => void;
  isSelected?: boolean;
  viewMode?: 'grid' | 'list';
}

export const ItemCard: React.FC<ItemCardProps> = ({
  item,
  onEdit,
  onDelete,
  onSelect,
  isSelected = false,
  viewMode = 'grid',
}) => {
  const [imageError, setImageError] = useState(false);
  const primaryImage = item.images.find(img => img.isPrimary) || item.images[0];

  if (viewMode === 'list') {
    return (
      <Card variant="outlined" className="p-4">
        <div className="flex items-center space-x-4">
          {onSelect && (
            <input
              type="checkbox"
              checked={isSelected}
              onChange={(e) => onSelect(e.target.checked)}
              className="w-5 h-5 border-2 border-black rounded"
              aria-label={`Select ${item.name}`}
            />
          )}
          
          <Link to={`/closet/${item.id}`} className="shrink-0">
            {primaryImage && !imageError ? (
              <img
                src={primaryImage.thumbnailUrl || primaryImage.url}
                alt={item.name}
                className="w-20 h-20 object-cover rounded-lg border-2 border-black"
                onError={() => setImageError(true)}
              />
            ) : (
              <div className="w-20 h-20 bg-gray-200 rounded-lg border-2 border-black flex items-center justify-center">
                <span className="text-2xl">üëï</span>
              </div>
            )}
          </Link>

          <div className="flex-1 min-w-0">
            <Link to={`/closet/${item.id}`}>
              <h3 className="font-semibold truncate hover:underline">{item.name}</h3>
            </Link>
            <p className="text-sm text-gray-600">
              {item.brand} ‚Ä¢ {item.category} ‚Ä¢ {item.size}
            </p>
            <div className="flex items-center space-x-4 mt-1 text-sm">
              <span>Worn {item.wearCount} times</span>
              {item.price && (
                <span>{formatCurrency(item.price)}</span>
              )}
            </div>
          </div>

          <div className="flex items-center space-x-2">
            {onEdit && (
              <Button variant="ghost" size="sm" onClick={onEdit}>
                Edit
              </Button>
            )}
            {onDelete && (
              <Button variant="ghost" size="sm" onClick={onDelete}>
                Delete
              </Button>
            )}
          </div>
        </div>
      </Card>
    );
  }

  return (
    <Card variant="outlined" className="relative group">
      {onSelect && (
        <div className="absolute top-2 left-2 z-10">
          <input
            type="checkbox"
            checked={isSelected}
            onChange={(e) => onSelect(e.target.checked)}
            className="w-5 h-5 border-2 border-black rounded bg-white"
            aria-label={`Select ${item.name}`}
          />
        </div>
      )}

      <Link to={`/closet/${item.id}`}>
        <div className="aspect-square relative overflow-hidden">
          {primaryImage && !imageError ? (
            <img
              src={primaryImage.url}
              alt={item.name}
              className="w-full h-full object-cover"
              onError={() => setImageError(true)}
              loading="lazy"
            />
          ) : (
            <div className="w-full h-full bg-gray-200 flex items-center justify-center">
              <span className="text-4xl">üëï</span>
            </div>
          )}
          
          {!item.isAvailable && (
            <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center">
              <span className="text-white font-semibold">In Laundry</span>
            </div>
          )}
        </div>
      </Link>

      <div className="p-4">
        <Link to={`/closet/${item.id}`}>
          <h3 className="font-semibold truncate hover:underline">{item.name}</h3>
        </Link>
        
        <p className="text-sm text-gray-600 truncate">
          {item.brand && `${item.brand} ‚Ä¢ `}{item.category}
        </p>
        
        <div className="mt-2 flex items-center justify-between text-sm">
          <span className="text-gray-500">
            Worn {item.wearCount} {item.wearCount === 1 ? 'time' : 'times'}
          </span>
          {item.price && (
            <span className="font-medium">{formatCurrency(item.price)}</span>
          )}
        </div>

        {item.tags.length > 0 && (
          <div className="mt-2 flex flex-wrap gap-1">
            {item.tags.slice(0, 3).map((tag) => (
              <span
                key={tag}
                className="px-2 py-1 text-xs bg-gray-100 rounded-full"
              >
                {tag}
              </span>
            ))}
            {item.tags.length > 3 && (
              <span className="px-2 py-1 text-xs text-gray-500">
                +{item.tags.length - 3}
              </span>
            )}
          </div>
        )}
      </div>

      {(onEdit || onDelete) && (
        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
          <div className="flex space-x-1">
            {onEdit && (
              <Button
                variant="secondary"
                size="sm"
                onClick={(e) => {
                  e.preventDefault();
                  onEdit();
                }}
                aria-label="Edit item"
              >
                ‚úèÔ∏è
              </Button>
            )}
            {onDelete && (
              <Button
                variant="secondary"
                size="sm"
                onClick={(e) => {
                  e.preventDefault();
                  onDelete();
                }}
                aria-label="Delete item"
              >
                üóëÔ∏è
              </Button>
            )}
          </div>
        </div>
      )}
    </Card>
  );
};

// src/features/closet/components/ItemForm/ItemForm.tsx
import React, { useState, useRef } from 'react';
import { Button } from '@/shared/components/ui/Button';
import { Input } from '@/shared/components/ui/Input';
import { Card } from '@/shared/components/ui/Card';
import { Select } from '@/shared/components/ui/Select';
import { TagInput } from '@/shared/components/ui/TagInput';
import { ImageUpload } from '../ImageUpload';
import type { ClothingItem, ClothingCategory, Season, Occasion } from '../../types';
import { CONSTANTS } from '@/shared/utils/constants';

interface ItemFormProps {
  item?: ClothingItem;
  onSubmit: (data: FormData) => Promise<void>;
  onCancel: () => void;
  isLoading?: boolean;
}

const CATEGORIES: { value: ClothingCategory; label: string }[] = [
  { value: 'tops', label: 'Tops' },
  { value: 'bottoms', label: 'Bottoms' },
  { value: 'dresses', label: 'Dresses' },
  { value: 'outerwear', label: 'Outerwear' },
  { value: 'shoes', label: 'Shoes' },
  { value: 'accessories', label: 'Accessories' },
  { value: 'underwear', label: 'Underwear' },
  { value: 'activewear', label: 'Activewear' },
  { value: 'swimwear', label: 'Swimwear' },
  { value: 'other', label: 'Other' },
];

const SEASONS: { value: Season; label: string }[] = [
  { value: 'spring', label: 'Spring' },
  { value: 'summer', label: 'Summer' },
  { value: 'fall', label: 'Fall' },
  { value: 'winter', label: 'Winter' },
  { value: 'all-season', label: 'All Season' },
];

const OCCASIONS: { value: Occasion; label: string }[] = [
  { value: 'casual', label: 'Casual' },
  { value: 'work', label: 'Work' },
  { value: 'formal', label: 'Formal' },
  { value: 'party', label: 'Party' },
  { value: 'sport', label: 'Sport' },
  { value: 'beach', label: 'Beach' },
  { value: 'date', label: 'Date' },
  { value: 'other', label: 'Other' },
];

export const ItemForm: React.FC<ItemFormProps> = ({
  item,
  onSubmit,
  onCancel,
  isLoading = false,
}) => {
  const [formData, setFormData] = useState({
    name: item?.name || '',
    category: item?.category || 'tops' as ClothingCategory,
    brand: item?.brand || '',
    size: item?.size || '',
    color: item?.color?.[0]?.name || '',
    price: item?.price?.toString() || '',
    material: item?.material?.join(', ') || '',
    tags: item?.tags || [],
    seasons: item?.seasons || [],
    occasions: item?.occasions || [],
    notes: item?.notes || '',
  });

  const [images, setImages] = useState<File[]>([]);
  const [existingImages, setExistingImages] = useState(item?.images || []);
  const [errors, setErrors] = useState<Record<string, string>>({});

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }

    if (!formData.category) {
      newErrors.category = 'Category is required';
    }

    if (formData.price && isNaN(Number(formData.price))) {
      newErrors.price = 'Price must be a number';
    }

    if (!item && images.length === 0) {
      newErrors.images = 'At least one image is required';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) return;

    const submitData = new FormData();
    
    // Add text fields
    Object.entries(formData).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        value.forEach(v => submitData.append(`${key}[]`, v));
      } else if (value) {
        submitData.append(key, value.toString());
      }
    });

    // Add images
    images.forEach((image, index) => {
      submitData.append(`images`, image);
    });

    // Add existing images to keep
    existingImages.forEach((img) => {
      submitData.append('existingImages[]', img.id);
    });

    await onSubmit(submitData);
  };

  const handleChange = (name: string, value: any) => {
    setFormData(prev => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <Card variant="outlined" padding="lg">
        <h3 className="text-lg font-semibold mb-4">Basic Information</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Name *
            </label>
            <Input
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              error={errors.name}
              placeholder="Black T-Shirt"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Category *
            </label>
            <Select
              value={formData.category}
              onChange={(value) => handleChange('category', value)}
              options={CATEGORIES}
              error={errors.category}
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Brand
            </label>
            <Input
              value={formData.brand}
              onChange={(e) => handleChange('brand', e.target.value)}
              placeholder="Nike"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Size
            </label>
            <Input
              value={formData.size}
              onChange={(e) => handleChange('size', e.target.value)}
              placeholder="M"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Color
            </label>
            <Input
              value={formData.color}
              onChange={(e) => handleChange('color', e.target.value)}
              placeholder="Black"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Price
            </label>
            <Input
              type="number"
              value={formData.price}
              onChange={(e) => handleChange('price', e.target.value)}
              error={errors.price}
              placeholder="29.99"
              min="0"
              step="0.01"
            />
          </div>
        </div>
      </Card>

      <Card variant="outlined" padding="lg">
        <h3 className="text-lg font-semibold mb-4">Images</h3>
        
        <ImageUpload
          images={images}
          existingImages={existingImages}
          onChange={setImages}
          onRemoveExisting={(id) => {
            setExistingImages(prev => prev.filter(img => img.id !== id));
          }}
          maxFiles={5}
          error={errors.images}
        />
      </Card>

      <Card variant="outlined" padding="lg">
        <h3 className="text-lg font-semibold mb-4">Details</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Material
            </label>
            <Input
              value={formData.material}
              onChange={(e) => handleChange('material', e.target.value)}
              placeholder="100% Cotton"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Seasons
            </label>
            <div className="flex flex-wrap gap-2">
              {SEASONS.map((season) => (
                <label key={season.value} className="flex items-center">
                  <input
                    type="checkbox"
                    value={season.value}
                    checked={formData.seasons.includes(season.value)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        handleChange('seasons', [...formData.seasons, season.value]);
                      } else {
                        handleChange('seasons', formData.seasons.filter(s => s !== season.value));
                      }
                    }}
                    className="w-4 h-4 border-2 border-black rounded mr-2"
                  />
                  <span className="text-sm">{season.label}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Occasions
            </label>
            <div className="flex flex-wrap gap-2">
              {OCCASIONS.map((occasion) => (
                <label key={occasion.value} className="flex items-center">
                  <input
                    type="checkbox"
                    value={occasion.value}
                    checked={formData.occasions.includes(occasion.value)}
                    onChange={(e) => {
                      if (e.target.checked) {
                        handleChange('occasions', [...formData.occasions, occasion.value]);
                      } else {
                        handleChange('occasions', formData.occasions.filter(o => o !== occasion.value));
                      }
                    }}
                    className="w-4 h-4 border-2 border-black rounded mr-2"
                  />
                  <span className="text-sm">{occasion.label}</span>
                </label>
              ))}
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Tags
            </label>
            <TagInput
              value={formData.tags}
              onChange={(tags) => handleChange('tags', tags)}
              placeholder="Add tags..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">
              Notes
            </label>
            <textarea
              value={formData.notes}
              onChange={(e) => handleChange('notes', e.target.value)}
              className="w-full px-3 py-2 border-2 border-black rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black"
              rows={3}
              placeholder="Any additional notes..."
            />
          </div>
        </div>
      </Card>

      <div className="flex justify-end space-x-4">
        <Button
          type="button"
          variant="ghost"
          onClick={onCancel}
          disabled={isLoading}
        >
          Cancel
        </Button>
        <Button
          type="submit"
          variant="primary"
          isLoading={isLoading}
        >
          {item ? 'Update Item' : 'Add Item'}
        </Button>
      </div>
    </form>
  );
};

// src/features/closet/components/ImageUpload/ImageUpload.tsx
import React, { useRef } from 'react';
import { Button } from '@/shared/components/ui/Button';
import { CONSTANTS } from '@/shared/utils/constants';
import type { ItemImage } from '../../types';

interface ImageUploadProps {
  images: File[];
  existingImages?: ItemImage[];
  onChange: (images: File[]) => void;
  onRemoveExisting?: (id: string) => void;
  maxFiles?: number;
  error?: string;
}

export const ImageUpload: React.FC<ImageUploadProps> = ({
  images,
  existingImages = [],
  onChange,
  onRemoveExisting,
  maxFiles = 5,
  error,
}) => {
  const inputRef = useRef<HTMLInputElement>(null);
  const totalImages = images.length + existingImages.length;

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    const validFiles = files.filter(file => {
      if (!CONSTANTS.IMAGE.ALLOWED_TYPES.includes(file.type)) {
        alert(`${file.name} is not a valid image type`);
        return false;
      }
      if (file.size > CONSTANTS.IMAGE.MAX_SIZE) {
        alert(`${file.name} is too large (max 10MB)`);
        return false;
      }
      return true;
    });

    const remainingSlots = maxFiles - totalImages;
    const filesToAdd = validFiles.slice(0, remainingSlots);
    
    onChange([...images, ...filesToAdd]);
  };

  const removeImage = (index: number) => {
    onChange(images.filter((_, i) => i !== index));
  };

  return (
    <div>
      <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-4">
        {existingImages.map((image) => (
          <div key={image.id} className="relative group">
            <img
              src={image.thumbnailUrl || image.url}
              alt={image.alt || 'Item image'}
              className="w-full aspect-square object-cover rounded-lg border-2 border-black"
            />
            {onRemoveExisting && (
              <button
                type="button"
                onClick={() => onRemoveExisting(image.id)}
                className="absolute top-2 right-2 bg-white border-2 border-black rounded-full w-8 h-8 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                aria-label="Remove image"
              >
                ‚úï
              </button>
            )}
          </div>
        ))}
        
        {images.map((image, index) => (
          <div key={index} className="relative group">
            <img
              src={URL.createObjectURL(image)}
              alt={`New image ${index + 1}`}
              className="w-full aspect-square object-cover rounded-lg border-2 border-black"
            />
            <button
              type="button"
              onClick={() => removeImage(index)}
              className="absolute top-2 right-2 bg-white border-2 border-black rounded-full w-8 h-8 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
              aria-label="Remove image"
            >
              ‚úï
            </button>
          </div>
        ))}
        
        {totalImages < maxFiles && (
          <button
            type="button"
            onClick={() => inputRef.current?.click()}
            className="aspect-square border-2 border-dashed border-black rounded-lg flex flex-col items-center justify-center hover:bg-gray-50 transition-colors"
          >
            <span className="text-2xl mb-2">üì∑</span>
            <span className="text-sm">Add Photo</span>
          </button>
        )}
      </div>

      <input
        ref={inputRef}
        type="file"
        accept={CONSTANTS.IMAGE.ALLOWED_TYPES.join(',')}
        multiple
        onChange={handleFileSelect}
        className="hidden"
      />

      {error && (
        <p className="text-sm text-red-600">{error}</p>
      )}

      <p className="text-sm text-gray-600">
        {totalImages}/{maxFiles} images ‚Ä¢ Max 10MB per image
      </p>
    </div>
  );
};

// src/features/closet/components/ClosetFilters/ClosetFilters.tsx
import React from 'react';
import { Input } from '@/shared/components/ui/Input';
import { Select } from '@/shared/components/ui/Select';
import { Button } from '@/shared/components/ui/Button';
import type { ClothingCategory, Season, Occasion } from '../../types';

interface ClosetFiltersProps {
  filters: {
    search: string;
    category: ClothingCategory | '';
    season: Season | '';
    occasion: Occasion | '';
    minPrice?: number;
    maxPrice?: number;
  };
  onChange: (filters: any) => void;
  onClear: () => void;
}

export const ClosetFilters: React.FC<ClosetFiltersProps> = ({
  filters,
  onChange,
  onClear,
}) => {
  const handleChange = (name: string, value: any) => {
    onChange({ ...filters, [name]: value });
  };

  const hasActiveFilters = Object.values(filters).some(value => 
    value !== '' && value !== undefined
  );

  return (
    <div className="space-y-4">
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <Input
            placeholder="Search items..."
            value={filters.search}
            onChange={(e) => handleChange('search', e.target.value)}
            icon={<span>üîç</span>}
          />
        </div>

        <Select
          value={filters.category}
          onChange={(value) => handleChange('category', value)}
          options={[
            { value: '', label: 'All Categories' },
            { value: 'tops', label: 'Tops' },
            { value: 'bottoms', label: 'Bottoms' },
            { value: 'dresses', label: 'Dresses' },
            { value: 'outerwear', label: 'Outerwear' },
            { value: 'shoes', label: 'Shoes' },
            { value: 'accessories', label: 'Accessories' },
            { value: 'underwear', label: 'Underwear' },
            { value: 'activewear', label: 'Activewear' },
            { value: 'swimwear', label: 'Swimwear' },
            { value: 'other', label: 'Other' },
          ]}
          className="w-full md:w-48"
        />

        <Select
          value={filters.season}
          onChange={(value) => handleChange('season', value)}
          options={[
            { value: '', label: 'All Seasons' },
            { value: 'spring', label: 'Spring' },
            { value: 'summer', label: 'Summer' },
            { value: 'fall', label: 'Fall' },
            { value: 'winter', label: 'Winter' },
            { value: 'all-season', label: 'All Season' },
          ]}
          className="w-full md:w-40"
        />

        <Select
          value={filters.occasion}
          onChange={(value) => handleChange('occasion', value)}
          options={[
            { value: '', label: 'All Occasions' },
            { value: 'casual', label: 'Casual' },
            { value: 'work', label: 'Work' },
            { value: 'formal', label: 'Formal' },
            { value: 'party', label: 'Party' },
            { value: 'sport', label: 'Sport' },
            { value: 'beach', label: 'Beach' },
            { value: 'date', label: 'Date' },
            { value: 'other', label: 'Other' },
          ]}
          className="w-full md:w-40"
        />
      </div>

      {hasActiveFilters && (
        <div className="flex justify-end">
          <Button variant="ghost" size="sm" onClick={onClear}>
            Clear Filters
          </Button>
        </div>
      )}
    </div>
  );
};

// src/features/closet/pages/ClosetPage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { Link } from 'react-router-dom';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/shared/components/ui/Button';
import { VirtualList } from '@/shared/components/ui/VirtualList';
import { Loading } from '@/shared/components/feedback/Loading';
import { ItemCard } from '../components/ItemCard';
import { ClosetFilters } from '../components/ClosetFilters';
import { closetApi } from '../api/closet.api';
import type { ClothingItem } from '../types';
import { toast } from '@/shared/components/feedback/Toast';
import { useDebounce } from '@/shared/hooks/useDebounce';

const ClosetPage: React.FC = () => {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [filters, setFilters] = useState({
    search: '',
    category: '' as any,
    season: '' as any,
    occasion: '' as any,
  });

  const debouncedSearch = useDebounce(filters.search, 300);

  const { data, isLoading, error, refetch } = useQuery({
    queryKey: ['closet-items', { ...filters, search: debouncedSearch }],
    queryFn: () => closetApi.getItems({
      page: 1,
      limit: 1000, // Get all items for virtual scrolling
      search: debouncedSearch,
      category: filters.category || undefined,
    }),
  });

  const filteredItems = useMemo(() => {
    if (!data?.data) return [];
    
    return data.data.filter(item => {
      if (filters.season && !item.seasons.includes(filters.season)) {
        return false;
      }
      if (filters.occasion && !item.occasions.includes(filters.occasion)) {
        return false;
      }
      return true;
    });
  }, [data?.data, filters]);

  const handleSelectItem = (itemId: string, selected: boolean) => {
    const newSelected = new Set(selectedItems);
    if (selected) {
      newSelected.add(itemId);
    } else {
      newSelected.delete(itemId);
    }
    setSelectedItems(newSelected);
  };

  const handleSelectAll = () => {
    if (selectedItems.size === filteredItems.length) {
      setSelectedItems(new Set());
    } else {
      setSelectedItems(new Set(filteredItems.map(item => item.id)));
    }
  };

  const handleDeleteSelected = async () => {
    if (selectedItems.size === 0) return;

    if (!confirm(`Delete ${selectedItems.size} items?`)) return;

    try {
      await closetApi.deleteMultipleItems(Array.from(selectedItems));
      toast.show({ type: 'success', message: 'Items deleted successfully' });
      setSelectedItems(new Set());
      refetch();
    } catch (error) {
      toast.show({ type: 'error', message: 'Failed to delete items' });
    }
  };

  const renderItem = (item: ClothingItem) => (
    <ItemCard
      key={item.id}
      item={item}
      viewMode={viewMode}
      isSelected={selectedItems.has(item.id)}
      onSelect={(selected) => handleSelectItem(item.id, selected)}
      onEdit={() => {/* Navigate to edit */}}
      onDelete={async () => {
        if (!confirm('Delete this item?')) return;
        try {
          await closetApi.deleteItem(item.id);
          toast.show({ type: 'success', message: 'Item deleted' });
          refetch();
        } catch (error) {
          toast.show({ type: 'error', message: 'Failed to delete item' });
        }
      }}
    />
  );

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-600 mb-4">Failed to load your closet</p>
          <Button onClick={() => refetch()}>Try Again</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">My Closet</h1>
            <p className="text-gray-600">
              {filteredItems.length} items ‚Ä¢ Total value: ${
                filteredItems.reduce((sum, item) => sum + (item.price || 0), 0).toFixed(2)
              }
            </p>
          </div>
          
          <Link to="/closet/add">
            <Button variant="primary">
              Add Item
            </Button>
          </Link>
        </div>

        <ClosetFilters
          filters={filters}
          onChange={setFilters}
          onClear={() => setFilters({
            search: '',
            category: '',
            season: '',
            occasion: '',
          })}
        />

        <div className="mt-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            {selectedItems.size > 0 && (
              <>
                <span className="text-sm text-gray-600">
                  {selectedItems.size} selected
                </span>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={handleSelectAll}
                >
                  {selectedItems.size === filteredItems.length ? 'Deselect All' : 'Select All'}
                </Button>
                <Button
                  variant="danger"
                  size="sm"
                  onClick={handleDeleteSelected}
                >
                  Delete Selected
                </Button>
              </>
            )}
          </div>

          <div className="flex items-center space-x-2">
            <Button
              variant={viewMode === 'grid' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('grid')}
              aria-label="Grid view"
            >
              <span className="text-lg">‚äû</span>
            </Button>
            <Button
              variant={viewMode === 'list' ? 'primary' : 'ghost'}
              size="sm"
              onClick={() => setViewMode('list')}
              aria-label="List view"
            >
              <span className="text-lg">‚ò∞</span>
            </Button>
          </div>
        </div>
      </div>

      {isLoading ? (
        <div className="flex justify-center py-12">
          <Loading size="lg" />
        </div>
      ) : filteredItems.length === 0 ? (
        <div className="text-center py-12">
          <p className="text-gray-600 mb-4">
            {filters.search || filters.category || filters.season || filters.occasion
              ? 'No items match your filters'
              : 'Your closet is empty'}
          </p>
          {!filters.search && !filters.category && !filters.season && !filters.occasion && (
            <Link to="/closet/add">
              <Button variant="primary">Add Your First Item</Button>
            </Link>
          )}
        </div>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
          {filteredItems.map(renderItem)}
        </div>
      ) : (
        <VirtualList
          items={filteredItems}
          height={600}
          itemHeight={100}
          renderItem={renderItem}
          className="space-y-2"
        />
      )}
    </div>
  );
};

export default ClosetPage;

// src/shared/components/ui/Select/Select.tsx
import React, { forwardRef } from 'react';
import { cn } from '@/shared/utils/cn';

export interface SelectOption {
  value: string;
  label: string;
}

export interface SelectProps extends Omit<React.SelectHTMLAttributes<HTMLSelectElement>, 'onChange'> {
  options: SelectOption[];
  error?: string;
  onChange?: (value: string) => void;
}

export const Select = forwardRef<HTMLSelectElement, SelectProps>(
  ({ options, error, onChange, className, ...props }, ref) => {
    return (
      <div className="w-full">
        <select
          ref={ref}
          className={cn(
            'w-full px-3 py-2 border-2 border-black rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black bg-white',
            error && 'border-red-500',
            className
          )}
          onChange={(e) => onChange?.(e.target.value)}
          {...props}
        >
          {options.map((option) => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {error && (
          <p className="mt-1 text-sm text-red-600">{error}</p>
        )}
      </div>
    );
  }
);

Select.displayName = 'Select';

// src/shared/components/ui/TagInput/TagInput.tsx
import React, { useState, KeyboardEvent } from 'react';
import { cn } from '@/shared/utils/cn';

interface TagInputProps {
  value: string[];
  onChange: (tags: string[]) => void;
  placeholder?: string;
  className?: string;
}

export const TagInput: React.FC<TagInputProps> = ({
  value = [],
  onChange,
  placeholder = 'Add a tag...',
  className,
}) => {
  const [inputValue, setInputValue] = useState('');

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' || e.key === ',') {
      e.preventDefault();
      addTag();
    } else if (e.key === 'Backspace' && !inputValue && value.length > 0) {
      removeTag(value.length - 1);
    }
  };

  const addTag = () => {
    const tag = inputValue.trim().toLowerCase();
    if (tag && !value.includes(tag)) {
      onChange([...value, tag]);
      setInputValue('');
    }
  };

  const removeTag = (index: number) => {
    onChange(value.filter((_, i) => i !== index));
  };

  return (
    <div
      className={cn(
        'flex flex-wrap gap-2 p-3 border-2 border-black rounded-lg focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-black',
        className
      )}
    >
      {value.map((tag, index) => (
        <span
          key={index}
          className="inline-flex items-center px-3 py-1 bg-black text-white rounded-full text-sm"
        >
          {tag}
          <button
            type="button"
            onClick={() => removeTag(index)}
            className="ml-2 text-white hover:text-gray-300"
            aria-label={`Remove ${tag}`}
          >
            ‚úï
          </button>
        </span>
      ))}
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        onKeyDown={handleKeyDown}
        onBlur={addTag}
        placeholder={value.length === 0 ? placeholder : ''}
        className="flex-1 min-w-[120px] outline-none"
      />
    </div>
  );
};

// src/shared/hooks/useDebounce.ts
import { useEffect, useState } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
}
