// src/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import { App } from './app/App';
import './styles/globals.css';
import './styles/tailwind.css';

// Initialize services
import './shared/services/i18n';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// src/app/App.tsx
import React from 'react';
import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import { ErrorBoundary } from '@/shared/components/feedback/ErrorBoundary';
import { AppProviders } from './providers';
import { AppRouter } from './Router';
import { useOffline } from '@/shared/hooks/useOffline';
import { Toast } from '@/shared/components/feedback/Toast';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      gcTime: 10 * 60 * 1000, // 10 minutes
      retry: 3,
      refetchOnWindowFocus: false,
    },
  },
});

export const App: React.FC = () => {
  const isOffline = useOffline();

  return (
    <ErrorBoundary>
      <QueryClientProvider client={queryClient}>
        <BrowserRouter>
          <AppProviders>
            <div className="min-h-screen bg-white text-black">
              <AppRouter />
              {isOffline && (
                <div className="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:w-auto bg-black text-white px-4 py-2 rounded-lg">
                  You're offline. Some features may be limited.
                </div>
              )}
              <Toast />
            </div>
          </AppProviders>
        </BrowserRouter>
        <ReactQueryDevtools initialIsOpen={false} />
      </QueryClientProvider>
    </ErrorBoundary>
  );
};

// src/app/providers/index.tsx
import React from 'react';
import { I18nextProvider } from 'react-i18next';
import i18n from '@/shared/services/i18n';
import { ThemeProvider } from './ThemeProvider';
import { AuthProvider } from './AuthProvider';

interface AppProvidersProps {
  children: React.ReactNode;
}

export const AppProviders: React.FC<AppProvidersProps> = ({ children }) => {
  return (
    <I18nextProvider i18n={i18n}>
      <ThemeProvider>
        <AuthProvider>
          {children}
        </AuthProvider>
      </ThemeProvider>
    </I18nextProvider>
  );
};

// src/app/providers/ThemeProvider.tsx
import React, { useEffect } from 'react';
import { useAppStore } from '@/shared/stores/app.store';

interface ThemeProviderProps {
  children: React.ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const theme = useAppStore((state) => state.theme);

  useEffect(() => {
    // Update CSS variables based on theme
    const root = document.documentElement;
    
    if (theme === 'dark') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
  }, [theme]);

  return <>{children}</>;
};

// src/app/providers/AuthProvider.tsx
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '@/features/auth/stores/auth.store';

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const navigate = useNavigate();
  const { refreshAuth, isAuthenticated } = useAuthStore();

  useEffect(() => {
    // Try to refresh auth on mount
    if (isAuthenticated) {
      refreshAuth().catch(() => {
        // Redirect to login if refresh fails
        navigate('/login');
      });
    }
  }, []);

  return <>{children}</>;
};

// src/app/Router.tsx
import React, { lazy, Suspense } from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuthStore } from '@/features/auth/stores/auth.store';
import { Loading } from '@/shared/components/feedback/Loading';
import { MainLayout } from '@/shared/components/layout/MainLayout';

// Lazy load feature modules
const ClosetPage = lazy(() => import('@/features/closet/pages/ClosetPage'));
const ItemDetailPage = lazy(() => import('@/features/closet/pages/ItemDetailPage'));
const AddItemPage = lazy(() => import('@/features/closet/pages/AddItemPage'));

const OutfitsPage = lazy(() => import('@/features/outfits/pages/OutfitsPage'));
const CreateOutfitPage = lazy(() => import('@/features/outfits/pages/CreateOutfitPage'));
const WeeklyPlanPage = lazy(() => import('@/features/outfits/pages/WeeklyPlanPage'));

const MarketplacePage = lazy(() => import('@/features/marketplace/pages/MarketplacePage'));
const ListingDetailPage = lazy(() => import('@/features/marketplace/pages/ListingDetailPage'));
const CreateListingPage = lazy(() => import('@/features/marketplace/pages/CreateListingPage'));

const ChallengesPage = lazy(() => import('@/features/challenges/pages/ChallengesPage'));
const ChallengeDetailPage = lazy(() => import('@/features/challenges/pages/ChallengeDetailPage'));

const TrendsPage = lazy(() => import('@/features/trends/pages/TrendsPage'));
const ArticlePage = lazy(() => import('@/features/trends/pages/ArticlePage'));

const ProfilePage = lazy(() => import('@/features/profile/pages/ProfilePage'));
const SettingsPage = lazy(() => import('@/features/profile/pages/SettingsPage'));

const LoginPage = lazy(() => import('@/features/auth/pages/LoginPage'));
const SignupPage = lazy(() => import('@/features/auth/pages/SignupPage'));

// Loading component for lazy loaded pages
const PageLoader = () => (
  <div className="min-h-screen flex items-center justify-center">
    <Loading size="lg" />
  </div>
);

// Protected route wrapper
interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const isAuthenticated = useAuthStore((state) => state.isAuthenticated);
  
  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }
  
  return <>{children}</>;
};

export const AppRouter: React.FC = () => {
  return (
    <Suspense fallback={<PageLoader />}>
      <Routes>
        {/* Public routes */}
        <Route path="/login" element={<LoginPage />} />
        <Route path="/signup" element={<SignupPage />} />

        {/* Protected routes */}
        <Route
          path="/"
          element={
            <ProtectedRoute>
              <MainLayout />
            </ProtectedRoute>
          }
        >
          <Route index element={<Navigate to="/closet" replace />} />
          
          {/* Closet */}
          <Route path="closet">
            <Route index element={<ClosetPage />} />
            <Route path="add" element={<AddItemPage />} />
            <Route path=":id" element={<ItemDetailPage />} />
          </Route>
          
          {/* Outfits */}
          <Route path="outfits">
            <Route index element={<OutfitsPage />} />
            <Route path="create" element={<CreateOutfitPage />} />
            <Route path="weekly-plan" element={<WeeklyPlanPage />} />
          </Route>
          
          {/* Marketplace */}
          <Route path="marketplace">
            <Route index element={<MarketplacePage />} />
            <Route path="create" element={<CreateListingPage />} />
            <Route path=":id" element={<ListingDetailPage />} />
          </Route>
          
          {/* Challenges */}
          <Route path="challenges">
            <Route index element={<ChallengesPage />} />
            <Route path=":id" element={<ChallengeDetailPage />} />
          </Route>
          
          {/* Trends */}
          <Route path="trends">
            <Route index element={<TrendsPage />} />
            <Route path="article/:slug" element={<ArticlePage />} />
          </Route>
          
          {/* Profile */}
          <Route path="profile">
            <Route index element={<ProfilePage />} />
            <Route path="settings" element={<SettingsPage />} />
          </Route>
        </Route>

        {/* 404 */}
        <Route path="*" element={<Navigate to="/" replace />} />
      </Routes>
    </Suspense>
  );
};

// src/shared/components/layout/MainLayout/MainLayout.tsx
import React from 'react';
import { Outlet } from 'react-router-dom';
import { Header } from '../Header';
import { MobileNav } from '../MobileNav';

export const MainLayout: React.FC = () => {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-1">
        <Outlet />
      </main>
      <MobileNav />
    </div>
  );
};

// src/shared/components/layout/MobileNav/MobileNav.tsx
import React from 'react';
import { NavLink } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

export const MobileNav: React.FC = () => {
  const { t } = useTranslation();

  const navItems = [
    { path: '/closet', label: t('nav.closet'), icon: 'üëï' },
    { path: '/outfits', label: t('nav.outfits'), icon: 'üëó' },
    { path: '/marketplace', label: t('nav.marketplace'), icon: 'üõçÔ∏è' },
    { path: '/challenges', label: t('nav.challenges'), icon: 'üèÜ' },
    { path: '/trends', label: t('nav.trends'), icon: 'üìà' },
  ];

  return (
    <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-white border-t-2 border-black">
      <div className="grid grid-cols-5 h-16">
        {navItems.map((item) => (
          <NavLink
            key={item.path}
            to={item.path}
            className={({ isActive }) =>
              `flex flex-col items-center justify-center text-xs ${
                isActive ? 'bg-black text-white' : 'text-black'
              }`
            }
          >
            <span className="text-lg mb-1">{item.icon}</span>
            <span>{item.label}</span>
          </NavLink>
        ))}
      </div>
    </nav>
  );
};

// src/shared/services/i18n/index.ts
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
import Backend from 'i18next-http-backend';

i18n
  .use(Backend)
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    fallbackLng: 'en',
    debug: process.env.NODE_ENV === 'development',
    
    interpolation: {
      escapeValue: false,
    },

    backend: {
      loadPath: '/locales/{{lng}}/{{ns}}.json',
    },

    ns: ['common', 'closet', 'marketplace', 'auth'],
    defaultNS: 'common',
  });

export default i18n;

// src/shared/components/feedback/Toast/Toast.tsx
import React, { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';

export interface ToastMessage {
  id: string;
  type: 'success' | 'error' | 'info' | 'warning';
  message: string;
  duration?: number;
}

class ToastManager {
  private listeners: ((messages: ToastMessage[]) => void)[] = [];
  private messages: ToastMessage[] = [];

  subscribe(listener: (messages: ToastMessage[]) => void) {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  show(message: Omit<ToastMessage, 'id'>) {
    const id = Date.now().toString();
    const toast: ToastMessage = { ...message, id };
    this.messages = [...this.messages, toast];
    this.notify();

    setTimeout(() => {
      this.dismiss(id);
    }, message.duration || 5000);
  }

  dismiss(id: string) {
    this.messages = this.messages.filter(m => m.id !== id);
    this.notify();
  }

  private notify() {
    this.listeners.forEach(listener => listener(this.messages));
  }
}

export const toast = new ToastManager();

export const Toast: React.FC = () => {
  const [messages, setMessages] = useState<ToastMessage[]>([]);

  useEffect(() => {
    return toast.subscribe(setMessages);
  }, []);

  if (messages.length === 0) return null;

  return createPortal(
    <div className="fixed top-4 right-4 z-50 space-y-2">
      {messages.map((message) => (
        <div
          key={message.id}
          className={`
            p-4 rounded-lg shadow-lg max-w-sm animate-slide-in-right
            ${message.type === 'success' ? 'bg-green-100 text-green-900 border-2 border-green-500' : ''}
            ${message.type === 'error' ? 'bg-red-100 text-red-900 border-2 border-red-500' : ''}
            ${message.type === 'info' ? 'bg-blue-100 text-blue-900 border-2 border-blue-500' : ''}
            ${message.type === 'warning' ? 'bg-yellow-100 text-yellow-900 border-2 border-yellow-500' : ''}
          `}
        >
          <div className="flex justify-between items-start">
            <p>{message.message}</p>
            <button
              onClick={() => toast.dismiss(message.id)}
              className="ml-4 text-sm font-bold"
            >
              ‚úï
            </button>
          </div>
        </div>
      ))}
    </div>,
    document.body
  );
};
